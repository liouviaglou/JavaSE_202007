library(devtools)
devtools::install_github("bnaras/SBCpip")
install.packages(c("modeest", "stringdist", "pbapply", "RMySQL", "gnm", "rPython", "tidyverse", "R.utils", "clipr", "plotly", "dbplyrmodeest", "stringdist", "pbapply", "RMySQL", "gnm", "rPython", "tidyverse", "R.utils", "clipr", "plotly", "dbplyr"))
install.packages(c("modeest", "stringdist", "pbapply", "RMySQL", "gnm", "rPython", "tidyverse", "R.utils", "clipr", "plotly", "dbplyrmodeest", "stringdist", "pbapply", "RMySQL", "gnm", "rPython", "tidyverse", "R.utils", "clipr", "plotly", "dbplyr"))
install.packages(c("modeest", "stringdist", "pbapply", "RMySQL", "gnm", "rPython", "tidyverse", "R.utils", "clipr", "plotly", "dbplyrmodeest", "stringdist", "pbapply", "RMySQL", "gnm", "rPython", "tidyverse", "R.utils", "clipr", "plotly", "dbplyr"), repos = c('http://irkernel.github.io/', getOption('repos')), verbose=TRUE)
R.Version
R.Version()
library(rPython)
packageVersion("rPython")
library(dplyr)
library(data.table)
library(partykit)
library(tictoc)
library(caret)
library(e1071)
library(randomForest)
library(ranger)
#for 3d plotting
library(akima)
library(rgl)
library(plotly)
getwd()
setwd('/Users/lubagloukhov/Documents/Consulting/PiqueSolutions/JavaSE_202007/scripts')
mod_df = pd.read_csv('../data/output/mod_df.csv')
catg_dummy_list = open('../data/output/catg_dummy_list.csv').read().splitlines()
cont_dummy_list = open('../data/output/cont_dummy_list.csv').read().splitlines()
dummy0_dummy_list = open('../data/output/dummy0_dummy_list.csv').read().splitlines()
exlc_dummy_list = open('../data/output/exlc_dummy_list.csv').read().splitlines()
catg_dummy_list = scan('../data/output/catg_dummy_list.csv')
catg_dummy_list = read_csv('../data/output/catg_dummy_list.csv')
library(dplyr)
library(data.table)
library(partykit)
library(tictoc)
library(caret)
library(e1071)
library(randomForest)
library(ranger)
#for 3d plotting
library(akima)
library(rgl)
library(plotly)
library(dplyr)
library(data.table)
library(partykit)
library(tictoc)
install.packages("tictoc")
library(tictoc)
library(caret)
library(e1071)
library(randomForest)
installed.packages(randomForest)
installed.packages("randomForest")
install.packages("randomForest")
library(randomForest)
library(ranger)
install.packages("ranger")
library(ranger)
library(plotly)
# load data
mod_df = read_csv('../data/output/mod_df.csv')
# load data
mod_df = read.csv('../data/output/mod_df.csv')
dim(mod_df)
catg_dummy_list = read.csv('../data/output/catg_dummy_list.csv')
catg_dummy_list
catg_dummy_list = read.csv('../data/output/catg_dummy_list.csv', header=FALSE)
catg_dummy_list
catg_dummy_list = unlist(read.csv('../data/output/catg_dummy_list.csv',
header=FALSE))
catg_dummy_list
catg_dummy_list[0]
catg_dummy_list
catg_dummy_list = read.csv('../data/output/catg_dummy_list.csv', header=FALSE)
summary(catg_dummy_list)
typeof(catg_dummy_list)
typeof(catg_dummy_list[0])
cont_dummy_list = read.table('../data/output/cont_dummy_list.csv',
sep="\n")
cont_dummy_list
cont_dummy_list[0]
cont_dummy_list[[0]]
catg_dummy_list = unlist(read.csv('../data/output/catg_dummy_list.csv',
header=FALSE, as.is=TRUE))
catg_dummy_list
catg_dummy_list[0]
catg_dummy_list[1]
cont_dummy_list = read.table('../data/output/cont_dummy_list.csv',
sep="\n", as.is=TRUE))
cont_dummy_list = read.table('../data/output/cont_dummy_list.csv',
sep="\n", as.is=TRUE)
cont_dummy_list
cont_dummy_list[1]
as.vector(cont_dummy_list)
as.vector(cont_dummy_list)[1]
as.vector(cont_dummy_list[1])
cont_dummy_list = unlist(read.table('../data/output/cont_dummy_list.csv',
sep="\n", as.is=TRUE))
cont_dummy_list
catg_dummy_list = unname(unlist(read.csv('../data/output/catg_dummy_list.csv',
header=FALSE, as.is=TRUE)))
catg_dummy_list
cont_dummy_list = unname(unlist(read.table('../data/output/cont_dummy_list.csv',
sep="\n", as.is=TRUE)))
cont_dummy_list
dummy0_dummy_list = unname(unlist(read.table('../data/output/dummy0_dummy_list.csv',
sep="\n", as.is=TRUE)))
exlc_dummy_list = unname(unlist(read.table('../data/output/exlc_dummy_list.csv',
sep="\n", as.is=TRUE)))
# specify response variable groupings
y0_list = ('Sat_Org_EclipseIDE',
'Sat_Org_IntelliJIDE',
'Sat_Org_JDeveloper',
'Sat_Org_NetBeansIDE',
'Sat_Org_RationalAppDev',
'Sat_Org_VisualStudio',
'Sat_Org_Other')
# specify response variable groupings
y0_list = c('Sat_Org_EclipseIDE',
'Sat_Org_IntelliJIDE',
'Sat_Org_JDeveloper',
'Sat_Org_NetBeansIDE',
'Sat_Org_RationalAppDev',
'Sat_Org_VisualStudio',
'Sat_Org_Other')
y0_list
y1_list = c('Sat_Org_JavaSEAMC',
'Sat_Org_JavaSEAMC_UsageLog',
'Sat_Org_JavaSEDepRuleSet',
'Sat_Org_JavaSEMSICustTools',
'Sat_Org_JavaSEFlightRec')
y2_list = c('OJavaSESubscription_Elem_Sat_Org_ContinuedInvest',
'OJavaSESubscription_Elem_Sat_Org_PatchesOlderV',
'OJavaSESubscription_Elem_Sat_Org_JavaWebStartUpdates',
'OJavaSESubscription_Elem_Sat_Org_DesktopManageUpdates',
'OJavaSESubscription_Elem_Sat_Org_AutoUpdateTools',
'OJavaSESubscription_Elem_Sat_Org_Monitoring',
'OJavaSESubscription_Elem_Sat_Org_MyOSupport',
'OJavaSESubscription_Elem_Sat_Org_AccessCloud',
'OJavaSESubscription_Elem_Sat_Org_FlexLicensing',
'OJavaSESubscription_Elem_Sat_Org_LegacyJava',
'OJavaSESubscription_Elem_Sat_Org_Other')
y3_list = c('OJavaSESubscription_Attr_Sat_CommMethods',
'OJavaSESubscription_Attr_Sat_PhoneSupport',
'OJavaSESubscription_Attr_Sat_SSKnowledge',
'OJavaSESubscription_Attr_Sat_CoNeedsUnd',
'OJavaSESubscription_Attr_Sat_TrainingQual',
'OJavaSESubscription_Attr_Sat_RepsonseTime')
y1_var = mod_df[y1_list]#.sum(axis=1,skipna=True)
y1_var
dim(y1_var)
y1_var[187,]
rowSums(mod_df[y1_list])[187,]
rowSums(mod_df[y1_list])
rowSums(mod_df[y1_list])[187]
rowMeans(mod_df[y1_list])[187]
rowMeans(mod_df[y1_list],na.rm=TRUE)[187]
y1_var = rowMeans(mod_df[y1_list],na.rm=TRUE)
y2_var = rowMeans(mod_df[y2_list],na.rm=TRUE)
y3_var = rowMeans(mod_df[y3_list],na.rm=TRUE)
y23_var = rowMeans(mod_df[y2_list+y3_list],na.rm=TRUE)
y123_var = rowMeans(mod_df[y1_list + y2_list+y3_list],na.rm=TRUE)
c(y2_list,y3_list)
y12_var = rowMeans(mod_df[c(y1_list,y2_list)],na.rm=TRUE)
y23_var = rowMeans(mod_df[c(y2_list,y3_list)],na.rm=TRUE)
y13_var = rowMeans(mod_df[c(y1_list,y3_list)],na.rm=TRUE)
y123_var = rowMeans(mod_df[c(y1_list,y2_list,y3_list)],na.rm=TRUE)
# specify predictor variable gorupings
x0_list = c('Use_Org_EclipseIDE',
'Use_Org_IntelliJIDE',
'Use_Org_JDeveloper',
'Use_Org_NetBeansIDE',
'Use_Org_RationalAppDev',
'Use_Org_VisualStudio',
'Use_Org_Other')
x1_list = c('Use_Org_JavaSEAMC',
'Use_Org_JavaSEAMC_UsageLog',
'Use_Org_JavaSEDepRuleSet',
'Use_Org_JavaSEMSICustTools',
'Use_Org_JavaSEFlightRec')
x2_list = c('OJavaSESubscription_Elem_Imp_Org_ContinuedInvest',
'OJavaSESubscription_Elem_Imp_Org_PatchesOlderV',
'OJavaSESubscription_Elem_Imp_Org_JavaWebStartUpdates',
'OJavaSESubscription_Elem_Imp_Org_DesktopManageUpdates',
'OJavaSESubscription_Elem_Imp_Org_AutoUpdateTools',
'OJavaSESubscription_Elem_Imp_Org_Monitoring',
'OJavaSESubscription_Elem_Imp_Org_MyOSupport',
'OJavaSESubscription_Elem_Imp_Org_AccessCloud',
'OJavaSESubscription_Elem_Imp_Org_FlexLicensing',
'OJavaSESubscription_Elem_Imp_Org_LegacyJava',
'OJavaSESubscription_Elem_Imp_Org_Other')
x3_list = c('OJavaSESubscription_Attr_Imp_CommMethods',
'OJavaSESubscription_Attr_Imp_PhoneSupport',
'OJavaSESubscription_Attr_Imp_SSKnowledge',
'OJavaSESubscription_Attr_Imp_CoNeedsUnd',
'OJavaSESubscription_Attr_Imp_TrainingQual',
'OJavaSESubscription_Attr_Imp_RepsonseTime')
dim(mod_df)
modw_df = rbind(mod_df,(mod_df[y0_list] * mod_df[x0_list]))
dim((mod_df[y0_list] * mod_df[x0_list]))
modw_df = cbind(mod_df,(mod_df[y0_list] * mod_df[x0_list]))
dim(modw_df)
names(modw_df)
length(names(modw_df))-length(y0_list)
length(names(modw_df))
dim(mod_df)
paste(y0_list,"_w")
names(modw_df)[length(names(modw_df))-length(y0_list):length(names(modw_df))] = paste(y0_list,"_w", sep="")
paste(y0_list,"_w", sep="")
length(paste(y0_list,"_w", sep=""))
length(names(modw_df)[length(names(modw_df))-length(y0_list):length(names(modw_df))])
length(names(modw_df))-length(y0_list):length(names(modw_df))
length(names(modw_df))
length(names(modw_df))-length(y0_list)
seq(1,5)
names(modw_df)[seq(length(names(modw_df))-length(y0_list),
length(names(modw_df)))] = paste(y0_list,"_w", sep="")
seq(length(names(modw_df))-length(y0_list),
length(names(modw_df)))
length(seq(length(names(modw_df))-length(y0_list),
length(names(modw_df))))
seq(length(names(modw_df))-length(y0_list)+1,
length(names(modw_df)))
names(modw_df)[seq(length(names(modw_df))-length(y0_list)+1,
length(names(modw_df)))] = paste(y0_list,"_w", sep="")
names(modw_df)
temp = mod_df[y0_list] * mod_df[x0_list]
head(temp)
names(temp) = paste(names(temp),"_w", sep="")
head(temp)
temp = mod_df[y1_list] * mod_df[x1_list]
names(temp) = paste(names(temp),"_w", sep="")
temp = mod_df[y2_list] * mod_df[x2_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(modw_df,temp)
temp = mod_df[y3_list] * mod_df[x3_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(modw_df,temp)
dim(modw_df)
print(length(y3_list)+length(y2_list)+length(y1_list)+length(y0_list))
dim(mod_df)
temp = mod_df[y0_list] * mod_df[x0_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(mod_df,temp)
temp = mod_df[y1_list] * mod_df[x1_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(modw_df,temp)
temp = mod_df[y2_list] * mod_df[x2_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(modw_df,temp)
temp = mod_df[y3_list] * mod_df[x3_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(modw_df,temp)
dim(modw_df)
print(mod_df.shape[1]+length(y3_list)+length(y2_list)+length(y1_list)+length(y0_list))
print(dim(mod_df[1])+length(y3_list)+length(y2_list)+length(y1_list)+length(y0_list))
dim(mod_df[1])
print(dim(mod_df)[1]+length(y3_list)+length(y2_list)+length(y1_list)+length(y0_list))
print(modw_df.shape)
y0w_list = paste(y0_list,"_w", sep="")
y0w_list
y1w_list = paste(y1_list,"_w", sep="")
y2w_list = paste(y2_list,"_w", sep="")
y3w_list = paste(y3_list,"_w", sep="")
y123w_var = rowMeans(mod_df[c(y1w_list,y2w_list,y3w_list)],na.rm=TRUE)
y123w_var = rowMeans(modw_df[c(y1w_list,y2w_list,y3w_list)],na.rm=TRUE)
dim(y123w_var)
length(y123w_var)
# construct X
X = modw_df[c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list)]
c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list)
modw_df[c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list)]
modw_df[catg_dummy_list]
modw_df[cont_dummy_list]
modw_df[dummy0_dummy_list]
dummy0_dummy_list
dummy0_dummy_list = unname(unlist(read.table('../data/output/dummy0_dummy_list.csv',
sep="\n", as.is=TRUE)))
dummy0_dummy_list
# construct X
X = modw_df[c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list)]
modw_df[dummy0_dummy_list]
dummy0_dummy_list
"OJavaSESubscription_Alts_Top3_MaintenanceTools" %in% names(modw_df)
ssapply(dummy0_dummy_list, function(x) x %in% names(modw_df))
sapply(dummy0_dummy_list, function(x) x %in% names(modw_df))
# construct X
dummy0_dummy_list[!sapply(dummy0_dummy_list, function(x) x %in% names(modw_df))]
dummy0_dummy_list = unname(unlist(read.table('../data/output/dummy0_dummy_list.csv',
sep="\n", as.is=TRUE)))
# construct X
dummy0_dummy_list[!sapply(dummy0_dummy_list, function(x) x %in% names(modw_df))]
grepl( "Top3" , names(modw_df)
)
names(modw_df)[grepl( "Top3" , names(modw_df) ) ]
mod_df <- mod_df %>% rename(OJavaSESubscription_Alts_Top3_EasierUse. =
JavaSESubscription_Alts_Top3_EasierUse.)
mod_df <- mod_df %>% rename("OJavaSESubscription_Alts_Top3_EasierUse." =
"JavaSESubscription_Alts_Top3_EasierUse")
# load data
mod_df = read.csv('../data/output/mod_df.csv')
names(mod_df)[grepl( "Top3" , names(mod_df) ) ]
# load data
mod_df = read.csv('../data/output/mod_df.csv')
names(mod_df)[grepl( "Top3" , names(mod_df) ) ]
# load data
mod_df = read.csv('../data/output/mod_df.csv')
names(mod_df)[grepl( "Top3" , names(mod_df) ) ]
dummy0_dummy_list
X[,c(y1_list,y2_list,y3_list,
x1_list,x2_list,x3_list)] <- list(NULL)
X = modw_df[c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list)]
temp = mod_df[y0_list] * mod_df[x0_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(mod_df,temp)
temp = mod_df[y1_list] * mod_df[x1_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(modw_df,temp)
temp = mod_df[y2_list] * mod_df[x2_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(modw_df,temp)
temp = mod_df[y3_list] * mod_df[x3_list]
names(temp) = paste(names(temp),"_w", sep="")
modw_df = cbind(modw_df,temp)
y0w_list = paste(y0_list,"_w", sep="")
y1w_list = paste(y1_list,"_w", sep="")
y2w_list = paste(y2_list,"_w", sep="")
y3w_list = paste(y3_list,"_w", sep="")
sapply(dummy0_dummy_list, function(x) x %in% names(modw_df))
X = modw_df[c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list)]
X[,c(y1_list,y2_list,y3_list,
x1_list,x2_list,x3_list)] <- list(NULL)
dim(X)
length(c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list))
lnegth(c(y1_list,y2_list,y3_list,
x1_list,x2_list,x3_list))
length(c(y1_list,y2_list,y3_list,
x1_list,x2_list,x3_list))
length(c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list)) - length(c(y1_list,y2_list,y3_list,
x1_list,x2_list,x3_list))
dim(X)
set.seed(0)
# replace NAs with means
sapply(X, function(x) sum(is.na(x)))
# replace NAs with means
sapply(X, function(x) sum(is.na(x)))>0
# replace NAs with means
sapply(X, function(x) sum(is.na(x)))[sapply(X, function(x) sum(is.na(x)))]>0
# replace NAs with means
sapply(X, function(x) sum(is.na(x)))[sapply(X, function(x) sum(is.na(x)))>0]
length(X)
dim(X)[0]
dim(X)[1]
# replace NAs with means
sapply(X, function(x) sum(is.na(x)))[sapply(X, function(x) sum(is.na(x)))>0]/dim(X)[1]
sum(is.na(y123w_var))
sum(is.na(y123w_var))/length(y123w_var)
# replace NAs with means
as.dataframe(sapply(X, function(x) sum(is.na(x)))[sapply(X, function(x) sum(is.na(x)))>0]/dim(X)[1]
)
# replace NAs with means
as.data.frame(sapply(X, function(x) sum(is.na(x)))[sapply(X, function(x) sum(is.na(x)))>0]/dim(X)[1]
)
# replace NAs with means
sapply(X, function(x) sum(is.na(x)))[sapply(X, function(x) sum(is.na(x)))>0]/dim(X)[1]
write.csv(X_nas,"X_nas.csv")
# replace NAs with means
X_nas = sapply(X, function(x) sum(is.na(x)))[sapply(X, function(x) sum(is.na(x)))>0]/dim(X)[1]
write.csv(X_nas,"X_nas.csv")
sum(is.na(y123w_var))/length(y123w_var) #
X = X.fillna(X.mean())
X %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
X <- X %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
# replace NAs with means
X_nas = sapply(X, function(x) sum(is.na(x)))[sapply(X, function(x) sum(is.na(x)))>0]/dim(X)[1]
X_nas
# construct X
X = modw_df[c(catg_dummy_list,cont_dummy_list,dummy0_dummy_list)]
X[,c(y1_list,y2_list,y3_list,
x1_list,x2_list,x3_list)] <- list(NULL)
X <- X %>% dplyr::mutate(x = replace_na(x, 0))
library(tidyr)
X <- X %>% dplyr::mutate(x = replace_na(x, 0))
X <- X %>% mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
mean(y123w_var, na.rm=TRUE)
y123w_var <- replace_na(mean(y123w_var, na.rm=TRUE))
train = Smarket[train_ind,] #creates the training dataset with row numbers stored in train_ind
smp_siz = floor(0.8*nrow(X))
train_ind = sample(seq_len(nrow(X)),size = smp_siz)
X_train = X[train_ind,]
X_test = X[-train_ind,]
y_train = y[train_ind,]
y_test = y[-train_ind,]
y <- y123w_var
y <- replace_na(mean(y, na.rm=TRUE))
mean(y)
X_train = X[train_ind,]
X_test = X[-train_ind,]
y_train = y[train_ind,]
y_train = y[train_ind]
y_test = y[-train_ind]
# fit model
ranger_01 <- ranger(y ~ X, ,
importance = 'impurity', num.trees=10,
probability = TRUE)
names(y)
name(Y)
X['y123w_mean'] <- y
X_train = X[train_ind,]
X_test = X[-train_ind,]
# fit model
ranger_01 <- ranger(y123w_mean ~ . , data = X_train ,
importance = 'impurity', num.trees=10,
probability = TRUE)
ranger_predict_01 <- predict(ranger_01,
data = X_test,
type="response")$predictions
ranger_01$prediction.error
ranger_01$r.squared
ranger_01 <- ranger(y123w_mean ~ . , data = X_train ,
importance = 'impurity', num.trees=10,
probability = TRUE)
ranger_01$prediction.error
ranger_01$r.squared
# fit model
ranger_01 <- ranger(y123w_mean ~ . , data = X_train ,
importance = 'impurity', num.trees=1000,
probability = TRUE)
ranger_01$prediction.error
ranger_01$r.squared
names(X_test)
X_test[y123w_mean]
X_test['y123w_mean']
y123w_var
rowMeans(modw_df[c(y1w_list,y2w_list,y3w_list)],na.rm=TRUE)
# construct yvar
y123w_var = rowMeans(modw_df[c(y1w_list,y2w_list,y3w_list)],na.rm=TRUE)
y123w_var
y <- y123w_var
y
mean(y, na.rm=TRUE)
y <- replace_na(mean(y, na.rm=TRUE))
y
y <- y123w_var
y <- replace_na(y,mean(y, na.rm=TRUE))
y
X['y123w_mean'] <- y
# fit model
ranger_01 <- ranger(y123w_mean ~ . , data = X_train ,
importance = 'impurity', num.trees=1000,
probability = TRUE)
ranger_01$prediction.error
ranger_01$r.squared
smp_siz = floor(0.8*nrow(X))
train_ind = sample(seq_len(nrow(X)),size = smp_siz)
X_train = X[train_ind,]
X_test = X[-train_ind,]
X_test['y123w_mean']
# fit model
ranger_01 <- ranger(y123w_mean ~ . , data = X_train ,
importance = 'impurity', num.trees=1000,
probability = TRUE)
ranger_01$prediction.error
ranger_01$r.squared
ranger_predict_01 <- predict(ranger_01,
data = X_test,
type="response")$predictions
ranger_predict_01
dim(ranger_predict_01)
dim(X_test)
dim(X_train)
# fit model
ranger_01 <- ranger(y123w_mean ~ . , data = X_train ,
importance = 'impurity', num.trees=1000)
ranger_predict_01 <- predict(ranger_01,
data = X_test,
type="response")$predictions
ranger_01$prediction.error
ranger_01$r.squared
ranger_predict_01
ranger_01$r.squared
# fit model
ranger_01 <- ranger(y123w_mean ~ . , data = X_train ,
importance = 'impurity', num.trees=10000)
ranger_predict_01 <- predict(ranger_01,
data = X_test,
type="response")$predictions
ranger_01$prediction.error
ranger_01$r.squared
ranger_01$variable.importance
